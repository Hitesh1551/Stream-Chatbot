import { useState, useEffect, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Loader2, Send, Bot, Lightbulb, CheckCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { AnimatePresence, motion } from "framer-motion";

// Type for chat messages
interface Message {
  id: number;
  sessionId: string;
  content: string;
  isBot: boolean;
  timestamp: Date;
}

export function ChatAssistant() {
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [messageInput, setMessageInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Get or create a session
  const { data: sessionData } = useQuery({
    queryKey: ['/api/chat/session'],
    onSuccess: (data) => {
      setSessionId(data.sessionId);
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to connect to chat service.",
        variant: "destructive"
      });
    }
  });

  // Get messages for the current session
  const { 
    data: messagesData, 
    isLoading: isLoadingMessages,
    refetch: refetchMessages
  } = useQuery({
    queryKey: sessionId ? [/api/chat/messages?sessionId=${sessionId}] : null,
    enabled: !!sessionId,
  });

  // Get suggestions based on context
  const { 
    data: suggestionsData,
    refetch: refetchSuggestions
  } = useQuery({
    queryKey: sessionId ? [/api/chat/suggestions?sessionId=${sessionId}] : null,
    enabled: !!sessionId,
  });

  // Send message mutation
  const sendMessageMutation = useMutation({
    mutationFn: async (content: string) => {
      setIsTyping(true);
      return apiRequest("POST", "/api/chat/messages", { 
        sessionId,
        content
      });
    },
    onSuccess: async () => {
      await refetchMessages();
      await refetchSuggestions();
      setIsTyping(false);
    },
    onError: () => {
      setIsTyping(false);
      toast({
        title: "Error",
        description: "Failed to send message.",
        variant: "destructive"
      });
    }
  });

  // Auto-scroll to bottom of chat
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messagesData, isTyping]);

  const handleSendMessage = () => {
    if (!messageInput.trim() || !sessionId) return;
    
    sendMessageMutation.mutate(messageInput);
    setMessageInput("");
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    if (sessionId) {
      sendMessageMutation.mutate(suggestion);
    }
  };

  const messages = messagesData || [];
  const suggestions = suggestionsData?.suggestions || [];

  return (
    <section id="chat-assist" className="py-20 px-6">
      <div className="container mx-auto">
        <h2 className="font-gaming text-4xl text-center mb-6">Chat with <span className="text-accent-blue">Stream</span><span className="text-accent-orange">Bot</span></h2>
        <p className="text-gray-400 text-center max-w-2xl mx-auto mb-16">Our assistant will guide you through booking a consultation that fits your streaming needs.</p>
        
        <div className="max-w-5xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-1 order-2 lg:order-1">
            <div className="bg-card p-6 rounded-lg border border-gray-800 mb-6">
              <h3 className="text-xl font-semibold mb-4 flex items-center">
                <Bot className="text-primary mr-2 h-5 w-5" />
                StreamBot Features
              </h3>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <CheckCircle className="text-accent-blue mt-1 mr-3 h-4 w-4" />
                  <span>Ask about streaming packages</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="text-accent-blue mt-1 mr-3 h-4 w-4" />
                  <span>Get equipment recommendations</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="text-accent-blue mt-1 mr-3 h-4 w-4" />
                  <span>Schedule a consultation</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="text-accent-blue mt-1 mr-3 h-4 w-4" />
                  <span>Learn streaming best practices</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="text-accent-blue mt-1 mr-3 h-4 w-4" />
                  <span>Get game-specific advice</span>
                </li>
              </ul>
            </div>
            
            <div className="bg-card p-6 rounded-lg border border-gray-800">
              <h3 className="text-xl font-semibold mb-4 flex items-center">
                <Lightbulb className="text-accent-orange mr-2 h-5 w-5" />
                Suggested Questions
              </h3>
              <div className="space-y-3">
                {suggestions.map((suggestion, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    className="w-full text-left justify-start h-auto py-3 px-4 bg-secondary/50 hover:bg-background border border-gray-700 hover:border-primary text-sm transition-all duration-300"
                    onClick={() => handleSuggestionClick(suggestion)}
                  >
                    {suggestion}
                  </Button>
                ))}
                
                {suggestions.length === 0 && (
                  <>
                    <Button
                      variant="outline"
                      className="w-full text-left justify-start h-auto py-3 px-4 bg-secondary/50 hover:bg-background border border-gray-700 hover:border-primary text-sm transition-all duration-300"
                      onClick={() => handleSuggestionClick("What streaming packages do you offer?")}
                    >
                      What streaming packages do you offer?
                    </Button>
                    <Button
                      variant="outline"
                      className="w-full text-left justify-start h-auto py-3 px-4 bg-secondary/50 hover:bg-background border border-gray-700 hover:border-accent-blue text-sm transition-all duration-300"
                      onClick={() => handleSuggestionClick("I need help with my stream quality")}
                    >
                      I need help with my stream quality
                    </Button>
                    <Button
                      variant="outline"
                      className="w-full text-left justify-start h-auto py-3 px-4 bg-secondary/50 hover:bg-background border border-gray-700 hover:border-accent-orange text-sm transition-all duration-300"
                      onClick={() => handleSuggestionClick("How can I grow my viewer count?")}
                    >
                      How can I grow my viewer count?
                    </Button>
                    <Button
                      variant="outline"
                      className="w-full text-left justify-start h-auto py-3 px-4 bg-secondary/50 hover:bg-background border border-gray-700 hover:border-primary text-sm transition-all duration-300"
                      onClick={() => handleSuggestionClick("I want to book the Pro package")}
                    >
                      I want to book the Pro package
                    </Button>
                  </>
                )}
              </div>
            </div>
          </div>
          
          <div className="lg:col-span-2 order-1 lg:order-2">
            <div className="bg-card rounded-lg border border-gray-800 flex flex-col h-[600px]">
              {/* Chat Header */}
              <div className="p-4 border-b border-gray-800 flex items-center">
                <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center mr-3">
                  <Bot className="text-primary-foreground h-5 w-5" />
                </div>
                <div>
                  <h3 className="font-semibold">StreamBot</h3>
                  <div className="flex items-center text-xs text-green-400">
                    <span className="w-2 h-2 bg-green-400 rounded-full mr-2"></span>
                    Online
                  </div>
                </div>
              </div>
              
              {/* Chat Messages */}
              <div className="flex-1 p-4 overflow-y-auto chat-container" style={{ scrollbarWidth: 'thin', scrollbarColor: '#4A5568 transparent' }}>
                {isLoadingMessages ? (
                  <div className="h-full w-full flex items-center justify-center">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  </div>
                ) : (
                  <>
                    <div className="text-center text-xs text-gray-500 mb-4">Today, {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                    
                    {messages.map((message: Message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className={chat-bubble ${message.isBot ? 'assistant-bubble' : 'user-bubble'}}
                      >
                        <p className="whitespace-pre-line">{message.content}</p>
                      </motion.div>
                    ))}
                    
                    {isTyping && (
                      <motion.div
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="chat-bubble assistant-bubble flex items-center py-3 px-4"
                      >
                        <div className="typing-indicator">
                          <motion.span 
                            animate={{ y: [0, -5, 0] }} 
                            transition={{ repeat: Infinity, duration: 1.5 }} 
                            className="w-2 h-2 rounded-full bg-primary inline-block"
                          />
                          <motion.span 
                            animate={{ y: [0, -5, 0] }} 
                            transition={{ repeat: Infinity, duration: 1.5, delay: 0.2 }} 
                            className="w-2 h-2 rounded-full bg-primary inline-block ml-1"
                          />
                          <motion.span 
                            animate={{ y: [0, -5, 0] }} 
                            transition={{ repeat: Infinity, duration: 1.5, delay: 0.4 }} 
                            className="w-2 h-2 rounded-full bg-primary inline-block ml-1"
                          />
                        </div>
                      </motion.div>
                    )}
                    
                    <div ref={messagesEndRef} />
                  </>
                )}
              </div>
              
              {/* Chat Input */}
              <div className="p-4 border-t border-gray-800">
                <div className="flex items-center">
                  <Input
                    type="text"
                    placeholder="Type your message..."
                    className="bg-secondary border border-gray-700 rounded-lg px-4 py-3 focus:outline-none focus:border-accent-blue"
                    value={messageInput}
                    onChange={(e) => setMessageInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    disabled={!sessionId || isTyping}
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!messageInput.trim() || !sessionId || isTyping}
                    className="ml-2 w-12 h-12 bg-primary rounded-lg flex items-center justify-center hover:bg-opacity-90 transition-all duration-300 p-0"
                  >
                    <Send className="h-5 w-5" />
                  </Button>
                </div>
                <div className="flex mt-2 gap-2 flex-wrap">
                  <Button
                    variant="outline"
                    size="sm"
                    className="px-3 py-1 bg-secondary rounded-full text-xs border border-gray-700 hover:border-primary transition-all duration-300 h-auto"
                    onClick={() => handleSuggestionClick("Book a session")}
                    disabled={!sessionId || isTyping}
                  >
                    Book a session
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="px-3 py-1 bg-secondary rounded-full text-xs border border-gray-700 hover:border-accent-blue transition-all duration-300 h-auto"
                    onClick={() => handleSuggestionClick("Equipment help")}
                    disabled={!sessionId || isTyping}
                  >
                    Equipment help
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="px-3 py-1 bg-secondary rounded-full text-xs border border-gray-700 hover:border-accent-orange transition-all duration-300 h-auto"
                    onClick={() => handleSuggestionClick("Growth tips")}
                    disabled={!sessionId || isTyping}
                  >
                    Growth tips
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
